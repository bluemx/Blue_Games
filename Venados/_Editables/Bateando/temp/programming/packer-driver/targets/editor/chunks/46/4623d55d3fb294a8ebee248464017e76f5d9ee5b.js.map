{"version":3,"sources":["file:///Users/fldsmdfr/Documents/GitHub/Blue_Games/Venados/_Editables/Bateando/assets/scripts/BallSpawner.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","UITransform","math","RigidBody2D","Vec2","Sprite","Color","ccclass","property","BallSpawner","tooltip","spawnTimer","gameTime","currentSpawnInterval","start","initialSpawnInterval","update","deltaTime","updateSpawnSpeed","spawnBall","speedReduction","speedIncreaseRate","Math","max","minSpawnInterval","ballPrefab","console","error","ball","canvasTransform","canvas","getComponent","worldSize","contentSize","width","height","gameAreaWidth","isGoldenBall","random","goldenBallChance","sprite","color","name","log","padding","randomX","lerp","spawnY","spawnHeight","setPosition","addChild","rigidBody","randomForce","minDownwardForce","maxDownwardForce","linearVelocity"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, UITransform, math, RigidBody2D, Vec2, Sprite, Color } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BallSpawner')\nexport class BallSpawner extends Component {\n    @property(Prefab) ballPrefab!: Prefab;\n    @property(Node) canvas!: Node;\n    @property({ tooltip: 'Chance for golden ball (0.0 to 1.0)' })\n    goldenBallChance: number = 0.05;\n    @property({ tooltip: 'Initial spawn interval in seconds' })\n    initialSpawnInterval: number = 2.0;\n    @property({ tooltip: 'Minimum spawn interval (fastest speed)' })\n    minSpawnInterval: number = 0.3;\n    @property({ tooltip: 'How much to reduce interval every second' })\n    speedIncreaseRate: number = 0.05;\n    @property spawnHeight: number = 200;\n    @property({ tooltip: 'Minimum downward force to apply' })\n    minDownwardForce: number = 0;\n    @property({ tooltip: 'Maximum downward force to apply' })\n    maxDownwardForce: number = 50;\n\n    private spawnTimer: number = 0;\n    private gameTime: number = 0;\n    private currentSpawnInterval: number = 2.0;\n\n    start() {\n        this.currentSpawnInterval = this.initialSpawnInterval;\n    }\n\n    update(deltaTime: number) {\n        // Update game time\n        this.gameTime += deltaTime;\n        \n        // Update spawn speed over time\n        this.updateSpawnSpeed();\n        \n        // Update spawn timer\n        this.spawnTimer += deltaTime;\n\n        if (this.spawnTimer >= this.currentSpawnInterval) {\n            this.spawnBall();\n            this.spawnTimer = 0;\n        }\n    }\n\n    private updateSpawnSpeed() {\n        // Gradually decrease spawn interval (increase speed)\n        const speedReduction = this.speedIncreaseRate * this.gameTime;\n        this.currentSpawnInterval = Math.max(\n            this.minSpawnInterval,\n            this.initialSpawnInterval - speedReduction\n        );\n    }\n\n    spawnBall(): void {\n        if (!this.ballPrefab) {\n            console.error('Ball prefab not assigned!');\n            return;\n        }\n\n        const ball = instantiate(this.ballPrefab);\n        const canvasTransform = this.canvas.getComponent(UITransform);\n        const worldSize = canvasTransform?.contentSize || { width: 800, height: 600 };\n\n        // Use design resolution width (640px) to ensure balls stay within game area\n        // This prevents balls from spawning outside the visible game area in web browsers\n        const gameAreaWidth = 640; // Project design resolution width from settings\n        \n        // Check if this should be a golden ball (5% chance)\n        const isGoldenBall = Math.random() < this.goldenBallChance;\n        \n        if (isGoldenBall) {\n            // Make it golden by tinting the sprite\n            const sprite = ball.getComponent(Sprite);\n            if (sprite) {\n                sprite.color = new Color(255, 215, 0, 255); // Gold color\n            }\n            \n            // Tag it as golden for the collision detection\n            ball.name = 'GoldenBall';\n            console.log('âœ¨ GOLDEN BALL spawned!');\n        }\n\n        // Random X position within game area bounds (with padding)\n        const padding = 50;\n        const randomX = math.lerp(-gameAreaWidth / 2 + padding, gameAreaWidth / 2 - padding, Math.random());\n        const spawnY = worldSize.height / 2 + this.spawnHeight; // Above screen\n\n        ball.setPosition(new Vec3(randomX, spawnY, 0));\n        this.canvas.addChild(ball);\n        \n        // Apply random downward force to vary fall speed\n        const rigidBody = ball.getComponent(RigidBody2D);\n        if (rigidBody) {\n            const randomForce = math.lerp(this.minDownwardForce, this.maxDownwardForce, Math.random());\n            // Apply downward velocity (negative Y direction)\n            rigidBody.linearVelocity = new Vec2(0, -randomForce);\n            console.log(`Ball spawned at: ${randomX}, ${spawnY} (within ${gameAreaWidth}px game area) with force: ${randomForce}`);\n        } else {\n            console.log(`Ball spawned at: ${randomX}, ${spawnY} (within ${gameAreaWidth}px game area) (no RigidBody2D found)`);\n        }\n    }\n}"]}