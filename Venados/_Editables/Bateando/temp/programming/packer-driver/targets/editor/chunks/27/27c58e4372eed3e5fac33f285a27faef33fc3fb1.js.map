{"version":3,"sources":["file:///Users/fldsmdfr/Documents/GitHub/Blue_Games/Venados/_Editables/Bateando/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","Contact2DType","Collider2D","director","sys","Label","BallController","ccclass","property","Tag","GameManager","score","batterHits","maxHits","start","ball","console","error","catcherZone","batSwing","all","boundsSensors","forEach","n","index","col","getComponent","on","BEGIN_CONTACT","onBegin","warn","name","updateUI","scoreLabel","string","hitsLabel","self","other","_contact","a","tag","b","isBallVs","BALL","CATCHER","log","resetBall","BAT","localStorage","setItem","String","loadScene","BOUNDS","onDestroy","off","getScore","getHits","getMaxHits","getRemainingHits","Math","max","resetGame"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Contact2DType, Collider2D, IPhysics2DContact, director, sys, Label } from 'cc';\nimport { BallController } from './BallCtrl';\nconst { ccclass, property } = _decorator;\n\nenum Tag {\n  BALL = 1,\n  CATCHER = 2,\n  BAT = 3,\n  BOUNDS = 4,\n}\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n  @property(BallController) ball!: BallController;\n\n  @property(Node) catcherZone!: Node;     // CircleCollider2D (Sensor)  Tag: CATCHER\n  @property(Node) batSwing!: Node;        // BoxCollider2D (Sensor)    Tag: BAT\n  @property([Node]) boundsSensors: Node[] = []; // Top/Left/Right (Sensor) Tag: BOUNDS\n  \n  // UI Elements (optional)\n  @property(Label) scoreLabel: Label = null!;\n  @property(Label) hitsLabel: Label = null!\n\n  private score = 0;\n  private batterHits = 0;\n  private maxHits = 3;\n\n  start() {\n    // Asegura tags en tus colliders desde el Editor:\n    // Ball CircleCollider2D -> tag = Tag.BALL\n    // Catcher -> tag = Tag.CATCHER\n    // Bat -> tag = Tag.BAT\n    // Bounds -> tag = Tag.BOUNDS\n\n    // Safety checks for required components\n    if (!this.ball) {\n      console.error('BallController not assigned to GameManager');\n      return;\n    }\n    \n    if (!this.catcherZone) {\n      console.error('CatcherZone not assigned to GameManager');\n      return;\n    }\n    \n    if (!this.batSwing) {\n      console.error('BatSwing not assigned to GameManager');\n      return;\n    }\n\n    const all: Node[] = [this.catcherZone, this.batSwing, ...this.boundsSensors];\n    all.forEach((n, index) => {\n      if (!n) {\n        console.error(`Node at index ${index} is null in GameManager`);\n        return;\n      }\n      \n      const col = n.getComponent(Collider2D);\n      if (col) {\n        col.on(Contact2DType.BEGIN_CONTACT, this.onBegin, this);\n      } else {\n        console.warn(`Collider2D component not found on node: ${n.name}`);\n      }\n    });\n    \n    // Initialize UI\n    this.updateUI();\n  }\n\n  private updateUI(): void {\n    if (this.scoreLabel) {\n      this.scoreLabel.string = `Score: ${this.score}`;\n    }\n    if (this.hitsLabel) {\n      this.hitsLabel.string = `Hits: ${this.batterHits}/${this.maxHits}`;\n    }\n  }\n\n  private onBegin(self: Collider2D, other: Collider2D, _contact: IPhysics2DContact|null) {\n    // Safety checks\n    if (!self || !other || !this.ball) {\n      console.error('Invalid colliders or missing ball reference');\n      return;\n    }\n\n    const a = self.tag, b = other.tag;\n    const isBallVs = (tag: number) => (a === Tag.BALL && b === tag) || (b === Tag.BALL && a === tag);\n\n    if (isBallVs(Tag.CATCHER)) {\n      // punto a favor del pitcher\n      this.score += 1;\n      console.log(`Score increased: ${this.score}`);\n      this.updateUI();\n      this.ball.resetBall();\n      return;\n    }\n\n    if (isBallVs(Tag.BAT)) {\n      // el bateador conectó\n      this.batterHits += 1;\n      console.log(`Batter hits: ${this.batterHits}`);\n      this.updateUI();\n      this.ball.resetBall();\n      \n      if (this.batterHits >= this.maxHits) {\n        // fin del juego\n        try {\n          // persistimos score en localStorage para leerlo en GameOver\n          sys.localStorage.setItem('lastScore', String(this.score));\n          director.loadScene('GameOver');\n        } catch (error) {\n          console.error('Error loading GameOver scene:', error);\n        }\n      }\n      return;\n    }\n\n    if (isBallVs(Tag.BOUNDS)) {\n      // balón se fue por bordes/superior → resetea\n      console.log('Ball hit bounds, resetting...');\n      this.ball.resetBall();\n      return;\n    }\n  }\n\n  // Cleanup method\n  protected onDestroy() {\n    const all: Node[] = [this.catcherZone, this.batSwing, ...this.boundsSensors];\n    all.forEach(n => {\n      if (n) {\n        const col = n.getComponent(Collider2D);\n        if (col) {\n          col.off(Contact2DType.BEGIN_CONTACT, this.onBegin, this);\n        }\n      }\n    });\n  }\n\n  // Public getters for HUD or other systems\n  public getScore(): number { \n    return this.score; \n  }\n  \n  public getHits(): number { \n    return this.batterHits; \n  }\n  \n  public getMaxHits(): number {\n    return this.maxHits;\n  }\n  \n  public getRemainingHits(): number {\n    return Math.max(0, this.maxHits - this.batterHits);\n  }\n  \n  // Reset game state (useful for restarting)\n  public resetGame(): void {\n    this.score = 0;\n    this.batterHits = 0;\n    this.updateUI();\n    if (this.ball) {\n      this.ball.resetBall();\n    }\n  }\n}"]}