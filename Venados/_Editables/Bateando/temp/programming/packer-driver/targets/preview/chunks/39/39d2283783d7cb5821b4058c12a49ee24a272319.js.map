{"version":3,"sources":["file:///Users/fldsmdfr/Documents/GitHub/Blue_Games/Venados/_Editables/Bateando/assets/scripts/BallCtrl.ts"],"names":["_decorator","Component","Contact2DType","Collider2D","director","Prefab","instantiate","Vec3","tween","ccclass","property","BallController","cameraOriginalPosition","start","initializeCameraPosition","collider","getComponent","on","BEGIN_CONTACT","onCollision","console","error","setTimeout","node","destroy","canvas","scene","getChildByName","camera","position","clone","warn","shakeCanvas","originalPosition","shakeIntensity","to","x","y","z","self","other","contact","isGoldenBall","name","emit","instantiateMiniLabel","scheduleDestroy","type","miniLabelPrefab","miniLabel","miniLabelCtrl","setText","setColor","parent","addChild","setPosition","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Contact2DType, Collider2D, IPhysics2DContact, director, Prefab, instantiate, Vec3, tween } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BallController')\nexport class BallController extends Component {\n  @property(Prefab) miniLabelPrefab!: Prefab;\n  \n  private cameraOriginalPosition: Vec3 | null = null;\n\n  start() {\n    // Store the original camera position once at start\n    this.initializeCameraPosition();\n    \n    \n    // Get the collider and listen for ANY collision\n    const collider = this.getComponent(Collider2D);\n    if (collider) {\n      collider.on(Contact2DType.BEGIN_CONTACT, this.onCollision, this);\n\n    } else {\n      console.error('❌ No Collider2D component found on ball!');\n    }\n\n    // Auto-destroy ball after 5 seconds\n    setTimeout(() => {\n      if (this.node) {\n        //console.log('⏰ Ball auto-destroyed after 5 seconds');\n        this.node.destroy();\n      }\n    }, 5000);\n  }\n\n  private initializeCameraPosition(): void {\n    // Find and store the camera's original position once\n    const canvas = this.node.scene.getChildByName('Canvas');\n    if (canvas) {\n      const camera = canvas.getChildByName('Camera') || canvas.getChildByName('Main Camera');\n      if (camera) {\n        this.cameraOriginalPosition = camera.position.clone();\n\n      } else {\n        console.warn('⚠️ Camera not found for shake initialization');\n      }\n    }\n  }\n\n  private shakeCanvas(): void {\n    // Use stored original position for shake\n    if (!this.cameraOriginalPosition) {\n      console.warn('⚠️ Camera original position not initialized');\n      return;\n    }\n\n    // Find the camera inside the canvas to shake\n    const canvas = this.node.scene.getChildByName('Canvas');\n    if (canvas) {\n      // Look for Camera node inside canvas\n      const camera = canvas.getChildByName('Camera') || canvas.getChildByName('Main Camera');\n      if (camera) {\n        const originalPosition = this.cameraOriginalPosition;\n        const shakeIntensity = 15;\n        \n        tween(camera)\n          .to(0.05, { position: new Vec3(originalPosition.x + shakeIntensity, originalPosition.y, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x - shakeIntensity, originalPosition.y, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x, originalPosition.y + shakeIntensity, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x, originalPosition.y - shakeIntensity, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x + shakeIntensity/2, originalPosition.y, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x - shakeIntensity/2, originalPosition.y, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x, originalPosition.y + shakeIntensity/2, originalPosition.z) })\n          .to(0.05, { position: new Vec3(originalPosition.x, originalPosition.y - shakeIntensity/2, originalPosition.z) })\n          .to(0.1, { position: originalPosition }) // Return to original position\n          .start();\n        \n\n      } else {\n        console.warn('⚠️ Camera not found inside Canvas');\n      }\n    }\n  }\n\n  private onCollision(self: Collider2D, other: Collider2D, contact: IPhysics2DContact | null) {\n      \n    if (other && other.node && contact) {\n        // Check if this is a golden ball\n        const isGoldenBall = this.node.name === 'GoldenBall';\n\n        if(other.node.name == 'Bottom-floor'){\n            // Shake the canvas when floor is touched\n            this.shakeCanvas();\n            \n            if (isGoldenBall) {\n                // Emit both score events (for tracking total score) and bateo events (for bateos counter)\n                director.emit('subtract-score', 200);\n                director.emit('subtract-bateo', 10); // Golden ball touching floor reduces bateos more\n                this.instantiateMiniLabel(contact, 'golden-floor');\n            } else {\n                // Emit both score events (for tracking total score) and bateo events (for bateos counter)\n                director.emit('subtract-score', 50);\n                director.emit('subtract-bateo', 5); // Normal ball touching floor reduces bateos\n                this.instantiateMiniLabel(contact, '-');\n            }\n            this.scheduleDestroy();\n\n        } else if(other.node.name == 'Boundaries'){\n            if (isGoldenBall) {\n                // Emit score events only (hitting boundaries gives points but doesn't affect bateos)\n                director.emit('add-score', 100);\n                this.instantiateMiniLabel(contact, 'golden-homerun');\n            } else {\n                // Emit score events only (hitting boundaries gives points but doesn't affect bateos)\n                director.emit('add-score', 4);\n                this.instantiateMiniLabel(contact, '+');\n            }\n            this.scheduleDestroy();\n        }\n            \n    }\n    \n  }\n\n  private instantiateMiniLabel(contact: IPhysics2DContact, type: string): void {\n    if (!this.miniLabelPrefab) {\n      console.warn('⚠️ MiniLabel prefab not assigned to BallController');\n      return;\n    }\n    const miniLabel = instantiate(this.miniLabelPrefab);\n    \n    // Get the MiniLabelCtrl component and set text/color\n    const miniLabelCtrl = miniLabel.getComponent('MiniLabelCtrl');\n    if (miniLabelCtrl) {\n        if(type === '+') {\n            miniLabelCtrl.setText('+4');\n            miniLabelCtrl.setColor('green');\n        } else if(type === '-') {\n            miniLabelCtrl.setText('-50');\n            miniLabelCtrl.setColor('red');\n        } else if(type === 'golden-homerun') {\n            miniLabelCtrl.setText('+100');\n            miniLabelCtrl.setColor('gold');\n        } else if(type === 'golden-floor') {\n            miniLabelCtrl.setText('-200');\n            miniLabelCtrl.setColor('darkred');\n        }\n    }\n    \n    const canvas = this.node.scene.getChildByName('Canvas') || this.node.parent;\n    if (canvas) {\n      canvas.addChild(miniLabel);\n      miniLabel.setPosition(new Vec3(0, 120, 0));\n    }\n  }\n\n  private scheduleDestroy() {\n    // Always delay destruction to avoid physics system conflicts\n    setTimeout(() => {\n\n        if (this.node) {\n            this.node.destroy();\n        }\n    }, 50);\n  }\n  onDestroy() {\n    //console.log('🏀 Ball destroyed');\n  }\n}"]}