{"version":3,"sources":["file:///Users/fldsmdfr/Documents/GitHub/Blue_Games/Venados/_Editables/Bateando-cocos-editable/assets/scripts/ScoreCtrl.ts"],"names":["_decorator","Component","Label","director","ccclass","property","ScoreCtrl","tooltip","currentScore","displayedScore","targetScore","animationTimer","start","on","onAddScore","onSubtractScore","updateScoreDisplay","onDestroy","off","stopScoreAnimation","points","startScoreAnimation","Math","max","animateScoreStep","min","animationStep","setTimeout","animationDelay","clearTimeout","scoreLabel","string","getScore","resetScore","addScore","subtractScore"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,Q,OAAAA,Q;;;;;;;;;OACjC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;2BAGjBM,S,WADZF,OAAO,CAAC,WAAD,C,UAEHC,QAAQ,CAACH,KAAD,C,UACRG,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAERF,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,2BALb,MACaD,SADb,SAC+BL,SAD/B,CACyC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAO7BO,YAP6B,GAON,CAPM;AAAA,eAQ7BC,cAR6B,GAQJ,CARI;AAAA,eAS7BC,WAT6B,GASP,CATO;AAAA,eAU7BC,cAV6B,GAUP,IAVO;AAAA;;AAYrCC,QAAAA,KAAK,GAAG;AACJ;AACAT,UAAAA,QAAQ,CAACU,EAAT,CAAY,WAAZ,EAAyB,KAAKC,UAA9B,EAA0C,IAA1C;AACAX,UAAAA,QAAQ,CAACU,EAAT,CAAY,gBAAZ,EAA8B,KAAKE,eAAnC,EAAoD,IAApD,EAHI,CAKJ;;AACA,eAAKC,kBAAL,GANI,CAQJ;AACH;;AAEDC,QAAAA,SAAS,GAAG;AACR;AACAd,UAAAA,QAAQ,CAACe,GAAT,CAAa,WAAb,EAA0B,KAAKJ,UAA/B,EAA2C,IAA3C;AACAX,UAAAA,QAAQ,CAACe,GAAT,CAAa,gBAAb,EAA+B,KAAKH,eAApC,EAAqD,IAArD;AACA,eAAKI,kBAAL;AACH;;AAEOL,QAAAA,UAAU,CAACM,MAAD,EAAiB;AAC/B,eAAKZ,YAAL,IAAqBY,MAArB;AACA,eAAKV,WAAL,GAAmB,KAAKF,YAAxB,CAF+B,CAI/B;;AACA,eAAKa,mBAAL,GAL+B,CAO/B;AACH;;AAEON,QAAAA,eAAe,CAACK,MAAD,EAAiB;AACpC,eAAKZ,YAAL,GAAoBc,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKf,YAAL,GAAoBY,MAAhC,CAApB,CADoC,CACyB;;AAC7D,eAAKV,WAAL,GAAmB,KAAKF,YAAxB,CAFoC,CAIpC;;AACA,eAAKa,mBAAL,GALoC,CAOpC;AACH;;AAEOA,QAAAA,mBAAmB,GAAG;AAC1B;AACA,eAAKF,kBAAL,GAF0B,CAI1B;;AACA,eAAKK,gBAAL;AACH;;AAEOA,QAAAA,gBAAgB,GAAG;AACvB,cAAI,KAAKf,cAAL,KAAwB,KAAKC,WAAjC,EAA8C;AAC1C,gBAAI,KAAKD,cAAL,GAAsB,KAAKC,WAA/B,EAA4C;AACxC;AACA,mBAAKD,cAAL,GAAsBa,IAAI,CAACG,GAAL,CAClB,KAAKhB,cAAL,GAAsB,KAAKiB,aADT,EAElB,KAAKhB,WAFa,CAAtB;AAIH,aAND,MAMO;AACH;AACA,mBAAKD,cAAL,GAAsBa,IAAI,CAACC,GAAL,CAClB,KAAKd,cAAL,GAAsB,KAAKiB,aADT,EAElB,KAAKhB,WAFa,CAAtB;AAIH,aAbyC,CAe1C;;;AACA,iBAAKM,kBAAL,GAhB0C,CAkB1C;;AACA,gBAAI,KAAKP,cAAL,KAAwB,KAAKC,WAAjC,EAA8C;AAC1C,mBAAKC,cAAL,GAAsBgB,UAAU,CAAC,MAAM;AACnC,qBAAKH,gBAAL;AACH,eAF+B,EAE7B,KAAKI,cAFwB,CAAhC;AAGH,aAJD,MAIO,CACH;AACH;AACJ;AACJ;;AAEOT,QAAAA,kBAAkB,GAAG;AACzB,cAAI,KAAKR,cAAT,EAAyB;AACrBkB,YAAAA,YAAY,CAAC,KAAKlB,cAAN,CAAZ;AACA,iBAAKA,cAAL,GAAsB,IAAtB;AACH;AACJ;;AAEOK,QAAAA,kBAAkB,GAAG;AACzB,cAAI,KAAKc,UAAT,EAAqB;AACjB,iBAAKA,UAAL,CAAgBC,MAAhB,QAA4B,KAAKtB,cAAjC;AACH;AACJ,SAnGoC,CAqGrC;;;AACOuB,QAAAA,QAAQ,GAAW;AACtB,iBAAO,KAAKxB,YAAZ;AACH;;AAEMyB,QAAAA,UAAU,GAAS;AACtB,eAAKd,kBAAL;AACA,eAAKX,YAAL,GAAoB,CAApB;AACA,eAAKC,cAAL,GAAsB,CAAtB;AACA,eAAKC,WAAL,GAAmB,CAAnB;AACA,eAAKM,kBAAL,GALsB,CAMtB;AACH;;AAEMkB,QAAAA,QAAQ,CAACd,MAAD,EAAuB;AAClC,eAAKN,UAAL,CAAgBM,MAAhB;AACH;;AAEMe,QAAAA,aAAa,CAACf,MAAD,EAAuB;AACvC,eAAKL,eAAL,CAAqBK,MAArB;AACH;;AAzHoC,O;;;;;;;;;;iBAGb,C;;;;;;;iBAEC,E","sourcesContent":["import { _decorator, Component, Label, director } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScoreCtrl')\nexport class ScoreCtrl extends Component {\n    @property(Label) scoreLabel!: Label;\n    @property({ tooltip: 'Animation speed - points added per step' })\n    animationStep: number = 2;\n    @property({ tooltip: 'Time between animation steps in milliseconds' })\n    animationDelay: number = 50;\n    \n    private currentScore: number = 0;\n    private displayedScore: number = 0;\n    private targetScore: number = 0;\n    private animationTimer: any = null;\n\n    start() {\n        // Listen for score events from balls\n        director.on('add-score', this.onAddScore, this);\n        director.on('subtract-score', this.onSubtractScore, this);\n        \n        // Initialize score display\n        this.updateScoreDisplay();\n        \n        //console.log('ðŸŽ¯ ScoreCtrl started - listening for add-score and subtract-score events');\n    }\n\n    onDestroy() {\n        // Clean up event listeners and animation\n        director.off('add-score', this.onAddScore, this);\n        director.off('subtract-score', this.onSubtractScore, this);\n        this.stopScoreAnimation();\n    }\n\n    private onAddScore(points: number) {\n        this.currentScore += points;\n        this.targetScore = this.currentScore;\n        \n        // Start animated counting\n        this.startScoreAnimation();\n        \n        //console.log(`ðŸŽ‰ Score will animate UP from ${this.displayedScore} to ${this.currentScore}!`);\n    }\n\n    private onSubtractScore(points: number) {\n        this.currentScore = Math.max(0, this.currentScore - points); // Prevent negative scores\n        this.targetScore = this.currentScore;\n        \n        // Start animated counting\n        this.startScoreAnimation();\n        \n        //console.log(`ðŸ’” Score will animate DOWN from ${this.displayedScore} to ${this.currentScore}!`);\n    }\n\n    private startScoreAnimation() {\n        // Clear any existing animation\n        this.stopScoreAnimation();\n        \n        // Start the animation loop\n        this.animateScoreStep();\n    }\n\n    private animateScoreStep() {\n        if (this.displayedScore !== this.targetScore) {\n            if (this.displayedScore < this.targetScore) {\n                // Animate UP - increase displayed score\n                this.displayedScore = Math.min(\n                    this.displayedScore + this.animationStep, \n                    this.targetScore\n                );\n            } else {\n                // Animate DOWN - decrease displayed score  \n                this.displayedScore = Math.max(\n                    this.displayedScore - this.animationStep, \n                    this.targetScore\n                );\n            }\n            \n            // Update the display\n            this.updateScoreDisplay();\n            \n            // Schedule next step if not finished\n            if (this.displayedScore !== this.targetScore) {\n                this.animationTimer = setTimeout(() => {\n                    this.animateScoreStep();\n                }, this.animationDelay);\n            } else {\n                //console.log(`âœ¨ Score animation completed! Final score: ${this.displayedScore}`);\n            }\n        }\n    }\n\n    private stopScoreAnimation() {\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = null;\n        }\n    }\n\n    private updateScoreDisplay() {\n        if (this.scoreLabel) {\n            this.scoreLabel.string = `${this.displayedScore}`;\n        }\n    }\n\n    // Public methods for external access\n    public getScore(): number {\n        return this.currentScore;\n    }\n\n    public resetScore(): void {\n        this.stopScoreAnimation();\n        this.currentScore = 0;\n        this.displayedScore = 0;\n        this.targetScore = 0;\n        this.updateScoreDisplay();\n        //console.log('ðŸ”„ Score reset to 0');\n    }\n\n    public addScore(points: number): void {\n        this.onAddScore(points);\n    }\n\n    public subtractScore(points: number): void {\n        this.onSubtractScore(points);\n    }\n}\n\n"]}