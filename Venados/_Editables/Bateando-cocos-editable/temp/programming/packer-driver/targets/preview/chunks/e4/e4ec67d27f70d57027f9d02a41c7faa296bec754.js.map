{"version":3,"sources":["file:///Users/fldsmdfr/Documents/GitHub/Blue_Games/Venados/Test/NewProject/assets/scripts/MiniLabelCtrl.ts"],"names":["_decorator","Component","Vec3","tween","Label","Color","ccclass","property","MiniLabelCtrl","tooltip","start","playAnimation","randomRotationZ","Math","random","node","eulerAngles","setText","text","label","getComponent","string","setColor","colorName","color","to","animationDuration","scale","targetScale","call","destroy","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;;;;;;;;;OACpD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;+BAGjBQ,a,WADZF,OAAO,CAAC,eAAD,C,UAEHC,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAGRF,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,2BALb,MACaD,aADb,SACmCP,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAOzCS,QAAAA,KAAK,GAAG;AACJ,eAAKC,aAAL;AACA,cAAMC,eAAe,GAAG,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,IAAwB,GAAhD,CAFI,CAEiD;;AACrD,eAAKC,IAAL,CAAUC,WAAV,GAAwB,IAAId,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAeU,eAAf,CAAxB;AACH;;AAEDK,QAAAA,OAAO,CAACC,IAAD,EAAqB;AACxB,cAAMC,KAAK,GAAG,KAAKC,YAAL,CAAkBhB,KAAlB,CAAd;;AACA,cAAIe,KAAJ,EAAW;AACPA,YAAAA,KAAK,CAACE,MAAN,GAAeH,IAAf;AACH;AACJ;;AAEDI,QAAAA,QAAQ,CAACC,SAAD,EAA0B;AAC9B,cAAMJ,KAAK,GAAG,KAAKC,YAAL,CAAkBhB,KAAlB,CAAd;;AACA,cAAIe,KAAJ,EAAW;AACP,gBAAII,SAAS,KAAK,OAAlB,EAA2B;AACvBJ,cAAAA,KAAK,CAACK,KAAN,GAAc,IAAInB,KAAJ,CAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqB,GAArB,CAAd,CADuB,CACkB;AAC5C,aAFD,MAEO,IAAIkB,SAAS,KAAK,KAAlB,EAAyB;AAC5BJ,cAAAA,KAAK,CAACK,KAAN,GAAc,IAAInB,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,CAAd,CAD4B,CACa;AAC5C,aAFM,MAEA,IAAIkB,SAAS,KAAK,MAAlB,EAA0B;AAC7BJ,cAAAA,KAAK,CAACK,KAAN,GAAc,IAAInB,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,CAApB,EAAuB,GAAvB,CAAd,CAD6B,CACc;AAC9C,aAFM,MAEA,IAAIkB,SAAS,KAAK,SAAlB,EAA6B;AAChCJ,cAAAA,KAAK,CAACK,KAAN,GAAc,IAAInB,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,CAAd,CADgC,CACS;AAC5C;AACJ;AACJ;;AAEDM,QAAAA,aAAa,GAAS;AAElB;AACAR,UAAAA,KAAK,CAAC,KAAKY,IAAN,CAAL,CACKU,EADL,CACQ,KAAKC,iBAAL,GAAyB,GADjC,EACsC;AAC9BC,YAAAA,KAAK,EAAE,IAAIzB,IAAJ,CAAS,KAAK0B,WAAd,EAA2B,KAAKA,WAAhC,EAA6C,CAA7C;AADuB,WADtC,EAIKH,EAJL,CAIQ,KAAKC,iBAAL,GAAyB,GAJjC,EAIsC;AAC9BC,YAAAA,KAAK,EAAE,IAAIzB,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf;AADuB,WAJtC,EAOK2B,IAPL,CAOU,MAAM;AACR;AACA,iBAAKd,IAAL,CAAUe,OAAV;AACH,WAVL,EAWKpB,KAXL;AAYH;;AAEDqB,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAtDwC,O;;;;;iBAEb,G;;;;;;;iBAGN,G","sourcesContent":["import { _decorator, Component, Node, Vec3, tween, Label, Color } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('MiniLabelCtrl')\nexport class MiniLabelCtrl extends Component {\n    @property({ tooltip: 'Animation duration in seconds' })\n    animationDuration: number = 1.0;\n    \n    @property({ tooltip: 'Target scale for the animation' })\n    targetScale: number = 1.2;\n\n    start() {\n        this.playAnimation();\n        const randomRotationZ = (Math.random() - 0.5) * 100; // Range: -20 to +20\n        this.node.eulerAngles = new Vec3(0, 0, randomRotationZ);\n    }\n\n    setText(text: string): void {\n        const label = this.getComponent(Label);\n        if (label) {\n            label.string = text;\n        }\n    }\n\n    setColor(colorName: string): void {\n        const label = this.getComponent(Label);\n        if (label) {\n            if (colorName === 'green') {\n                label.color = new Color(0, 255, 0, 255); // Green\n            } else if (colorName === 'red') {\n                label.color = new Color(255, 0, 0, 255); // Red\n            } else if (colorName === 'gold') {\n                label.color = new Color(255, 215, 0, 255); // Gold\n            } else if (colorName === 'darkred') {\n                label.color = new Color(139, 0, 0, 255); // Dark Red\n            }\n        }\n    }\n\n    playAnimation(): void {\n\n        // Scale up animation\n        tween(this.node)\n            .to(this.animationDuration * 0.3, { \n                scale: new Vec3(this.targetScale, this.targetScale, 1) \n            })\n            .to(this.animationDuration * 0.3, { \n                scale: new Vec3(0, 0, 1) \n            })\n            .call(() => {\n                // Destroy the node after animation completes\n                this.node.destroy();\n            })\n            .start();\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n"]}